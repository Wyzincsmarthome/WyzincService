require('dotenv').config();
require('colors');

const { createAuth, getAllProductsFromShopify } = require('./functions/shopifyAPI');
const { sendMessage } = require('./functions/discordAPI');

async function executeAsyncTask() {
    try {
        console.log('üöÄ Iniciando sincroniza√ß√£o de produtos...'.green);
        console.log(`‚è∞ Timestamp: ${new Date().toISOString()}`.cyan);
        
        // Criar Cliente Shopify
        console.log('üîó Criando cliente Shopify...'.yellow);
        const shopifyClient = await createAuth();
        
        if (!shopifyClient) {
            throw new Error('Falha ao criar cliente Shopify');
        }
        
        console.log('‚úÖ Cliente Shopify criado com sucesso'.green);
        
        // Processar todos os produtos (a fun√ß√£o agora faz tudo internamente)
        console.log('üõçÔ∏è Iniciando processamento de produtos...'.yellow);
        const result = await getAllProductsFromShopify(shopifyClient);
        
        // Validar resultado
        if (!result || typeof result !== 'object') {
            throw new Error('Resultado inv√°lido da fun√ß√£o getAllProductsFromShopify');
        }
        
        // Estat√≠sticas finais
        console.log('\nüìä Sincroniza√ß√£o conclu√≠da!'.green.bold);
        console.log(`   ‚Ä¢ Total processados: ${result.processed || 0}`.cyan);
        console.log(`   ‚Ä¢ Sucessos: ${result.success || 0}`.green);
        console.log(`   ‚Ä¢ Erros: ${result.errors || 0}`.red);
        console.log(`   ‚Ä¢ Ignorados (vazios/existentes): ${result.skipped || 0}`.yellow);
        
        // Calcular taxa de sucesso
        const processedForSuccess = Math.max((result.processed || 0) - (result.skipped || 0), 1);
        const successRate = ((result.success || 0) / processedForSuccess * 100).toFixed(1);
        console.log(`   ‚Ä¢ Taxa de sucesso: ${successRate}%`.cyan);
        
        // Enviar resumo para Discord
        try {
            const discordMessage = `üéâ Sincroniza√ß√£o conclu√≠da!\nüìä Processados: ${result.processed || 0} | ‚úÖ Sucessos: ${result.success || 0} | ‚ùå Erros: ${result.errors || 0} | ‚ö†Ô∏è Ignorados: ${result.skipped || 0}`;
            await sendMessage(discordMessage);
            console.log('üì¢ Resumo enviado para Discord'.green);
        } catch (discordError) {
            console.log(`‚ö†Ô∏è Erro ao enviar resumo Discord: ${discordError.message}`.yellow);
            // N√£o √© erro fatal, continua
        }
        
        console.log('üèÅ Processo finalizado com sucesso!'.green.bold);
        
    } catch (error) {
        console.log(`üö® Erro fatal na sincroniza√ß√£o: ${error.message}`.red.bold);
        console.error('Stack trace:', error.stack);
        
        // Enviar notifica√ß√£o de erro fatal para Discord
        try {
            await sendMessage(`üö® ERRO FATAL na sincroniza√ß√£o: ${error.message}`);
        } catch (discordError) {
            console.log(`‚ö†Ô∏è Erro ao enviar notifica√ß√£o de erro fatal: ${discordError.message}`.yellow);
        }
        
        // Sair com c√≥digo de erro para indicar falha no GitHub Actions
        process.exit(1);
    }
}

// Executar sincroniza√ß√£o
executeAsyncTask()
    .then(() => {
        console.log('‚úÖ Sincroniza√ß√£o executada com sucesso!'.green);
        process.exit(0);
    })
    .catch((error) => {
        console.log(`‚ùå Erro na execu√ß√£o: ${error.message}`.red);
        console.error('Erro completo:', error);
        process.exit(1);
    });
